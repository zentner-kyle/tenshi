diff -Naur src-orig/lbaselib.c src/lbaselib.c
--- src-orig/lbaselib.c	2014-07-04 20:55:27.731739251 -0700
+++ src/lbaselib.c	2014-07-04 20:59:07.171729406 -0700
@@ -19,8 +19,9 @@
 #include "lauxlib.h"
 #include "lualib.h"
 
+#include "lbaselib.h"
 
-static int luaB_print (lua_State *L) {
+LUAMOD_API int luaB_print (lua_State *L) {
   int n = lua_gettop(L);  /* number of arguments */
   int i;
   lua_getglobal(L, "tostring");
@@ -68,7 +69,7 @@
 }
 
 
-static int luaB_tonumber (lua_State *L) {
+LUAMOD_API int luaB_tonumber (lua_State *L) {
   if (lua_isnoneornil(L, 2)) {  /* standard conversion? */
     luaL_checkany(L, 1);
     if (lua_type(L, 1) == LUA_TNUMBER) {  /* already a number? */
@@ -101,7 +102,7 @@
 }
 
 
-static int luaB_error (lua_State *L) {
+LUAMOD_API int luaB_error (lua_State *L) {
   int level = luaL_optint(L, 2, 1);
   lua_settop(L, 1);
   if (lua_isstring(L, 1) && level > 0) {  /* add extra information? */
@@ -113,7 +114,7 @@
 }
 
 
-static int luaB_getmetatable (lua_State *L) {
+LUAMOD_API int luaB_getmetatable (lua_State *L) {
   luaL_checkany(L, 1);
   if (!lua_getmetatable(L, 1)) {
     lua_pushnil(L);
@@ -124,7 +125,7 @@
 }
 
 
-static int luaB_setmetatable (lua_State *L) {
+LUAMOD_API int luaB_setmetatable (lua_State *L) {
   int t = lua_type(L, 2);
   luaL_checktype(L, 1, LUA_TTABLE);
   luaL_argcheck(L, t == LUA_TNIL || t == LUA_TTABLE, 2,
@@ -137,7 +138,7 @@
 }
 
 
-static int luaB_rawequal (lua_State *L) {
+LUAMOD_API int luaB_rawequal (lua_State *L) {
   luaL_checkany(L, 1);
   luaL_checkany(L, 2);
   lua_pushboolean(L, lua_rawequal(L, 1, 2));
@@ -145,7 +146,7 @@
 }
 
 
-static int luaB_rawlen (lua_State *L) {
+LUAMOD_API int luaB_rawlen (lua_State *L) {
   int t = lua_type(L, 1);
   luaL_argcheck(L, t == LUA_TTABLE || t == LUA_TSTRING, 1,
                    "table or string expected");
@@ -154,7 +155,7 @@
 }
 
 
-static int luaB_rawget (lua_State *L) {
+LUAMOD_API int luaB_rawget (lua_State *L) {
   luaL_checktype(L, 1, LUA_TTABLE);
   luaL_checkany(L, 2);
   lua_settop(L, 2);
@@ -162,7 +163,7 @@
   return 1;
 }
 
-static int luaB_rawset (lua_State *L) {
+LUAMOD_API int luaB_rawset (lua_State *L) {
   luaL_checktype(L, 1, LUA_TTABLE);
   luaL_checkany(L, 2);
   luaL_checkany(L, 3);
@@ -172,7 +173,7 @@
 }
 
 
-static int luaB_collectgarbage (lua_State *L) {
+LUAMOD_API int luaB_collectgarbage (lua_State *L) {
   static const char *const opts[] = {"stop", "restart", "collect",
     "count", "step", "setpause", "setstepmul",
     "isrunning", NULL};
@@ -200,7 +201,7 @@
 }
 
 
-static int luaB_type (lua_State *L) {
+LUAMOD_API int luaB_type (lua_State *L) {
   luaL_checkany(L, 1);
   lua_pushstring(L, luaL_typename(L, 1));
   return 1;
@@ -224,7 +225,7 @@
 }
 
 
-static int luaB_next (lua_State *L) {
+LUAMOD_API int luaB_next (lua_State *L) {
   luaL_checktype(L, 1, LUA_TTABLE);
   lua_settop(L, 2);  /* create a 2nd argument if there isn't one */
   if (lua_next(L, 1))
@@ -236,7 +237,7 @@
 }
 
 
-static int luaB_pairs (lua_State *L) {
+LUAMOD_API int luaB_pairs (lua_State *L) {
   return pairsmeta(L, "__pairs", 0, luaB_next);
 }
 
@@ -250,7 +251,7 @@
 }
 
 
-static int luaB_ipairs (lua_State *L) {
+LUAMOD_API int luaB_ipairs (lua_State *L) {
   return pairsmeta(L, "__ipairs", 1, ipairsaux);
 }
 
@@ -272,7 +273,7 @@
 }
 
 
-static int luaB_loadfile (lua_State *L) {
+LUAMOD_API int luaB_loadfile (lua_State *L) {
   const char *fname = luaL_optstring(L, 1, NULL);
   const char *mode = luaL_optstring(L, 2, NULL);
   int env = (!lua_isnone(L, 3) ? 3 : 0);  /* 'env' index or 0 if no 'env' */
@@ -319,7 +320,7 @@
 }
 
 
-static int luaB_load (lua_State *L) {
+LUAMOD_API int luaB_load (lua_State *L) {
   int status;
   size_t l;
   const char *s = lua_tolstring(L, 1, &l);
@@ -347,7 +348,7 @@
 }
 
 
-static int luaB_dofile (lua_State *L) {
+LUAMOD_API int luaB_dofile (lua_State *L) {
   const char *fname = luaL_optstring(L, 1, NULL);
   lua_settop(L, 1);
   if (luaL_loadfile(L, fname) != LUA_OK)
@@ -357,7 +358,7 @@
 }
 
 
-static int luaB_assert (lua_State *L) {
+LUAMOD_API int luaB_assert (lua_State *L) {
   if (lua_toboolean(L, 1))  /* condition is true? */
     return lua_gettop(L);  /* return all arguments */
   else {  /* error */
@@ -369,7 +370,7 @@
 }
 
 
-static int luaB_select (lua_State *L) {
+LUAMOD_API int luaB_select (lua_State *L) {
   int n = lua_gettop(L);
   if (lua_type(L, 1) == LUA_TSTRING && *lua_tostring(L, 1) == '#') {
     lua_pushinteger(L, n-1);
@@ -403,7 +404,7 @@
 }
 
 
-static int luaB_pcall (lua_State *L) {
+LUAMOD_API int luaB_pcall (lua_State *L) {
   int status;
   luaL_checkany(L, 1);
   lua_pushboolean(L, 1);  /* first result if no errors */
@@ -418,7 +419,7 @@
 ** stack will have <f, err, true, f, [args...]>; so, the function passes
 ** 2 to 'finishpcall' to skip the 2 first values when returning results.
 */
-static int luaB_xpcall (lua_State *L) {
+LUAMOD_API int luaB_xpcall (lua_State *L) {
   int status;
   int n = lua_gettop(L);
   luaL_checktype(L, 2, LUA_TFUNCTION);  /* check error function */
@@ -430,7 +431,7 @@
 }
 
 
-static int luaB_tostring (lua_State *L) {
+LUAMOD_API int luaB_tostring (lua_State *L) {
   luaL_checkany(L, 1);
   luaL_tolstring(L, 1, NULL);
   return 1;
diff -Naur src-orig/lbaselib.h src/lbaselib.h
--- src-orig/lbaselib.h	1969-12-31 16:00:00.000000000 -0800
+++ src/lbaselib.h	2014-07-04 20:58:57.799729827 -0700
@@ -0,0 +1,30 @@
+// This file has been added to purposely expose the luaB_* functions so that
+// it is possible to build a custom base module.
+
+#ifndef LBASELIB_H_
+#define LBASELIB_H_
+
+LUAMOD_API int luaB_print (lua_State *L);
+LUAMOD_API int luaB_tonumber (lua_State *L);
+LUAMOD_API int luaB_error (lua_State *L);
+LUAMOD_API int luaB_getmetatable (lua_State *L);
+LUAMOD_API int luaB_setmetatable (lua_State *L);
+LUAMOD_API int luaB_rawequal (lua_State *L);
+LUAMOD_API int luaB_rawlen (lua_State *L);
+LUAMOD_API int luaB_rawget (lua_State *L);
+LUAMOD_API int luaB_rawset (lua_State *L);
+LUAMOD_API int luaB_collectgarbage (lua_State *L);
+LUAMOD_API int luaB_type (lua_State *L);
+LUAMOD_API int luaB_next (lua_State *L);
+LUAMOD_API int luaB_pairs (lua_State *L);
+LUAMOD_API int luaB_ipairs (lua_State *L);
+LUAMOD_API int luaB_loadfile (lua_State *L);
+LUAMOD_API int luaB_load (lua_State *L);
+LUAMOD_API int luaB_dofile (lua_State *L);
+LUAMOD_API int luaB_assert (lua_State *L);
+LUAMOD_API int luaB_select (lua_State *L);
+LUAMOD_API int luaB_pcall (lua_State *L);
+LUAMOD_API int luaB_xpcall (lua_State *L);
+LUAMOD_API int luaB_tostring (lua_State *L);
+
+#endif  // LBASELIB_H_
diff -Naur src-orig/lstrlib.c src/lstrlib.c
--- src-orig/lstrlib.c	2014-07-04 20:55:27.735739250 -0700
+++ src/lstrlib.c	2014-07-04 21:20:40.103671404 -0700
@@ -20,6 +20,7 @@
 #include "lauxlib.h"
 #include "lualib.h"
 
+#include "lstrlib.h"
 
 /*
 ** maximum number of captures that a pattern can do during
@@ -35,7 +36,7 @@
 
 
 
-static int str_len (lua_State *L) {
+LUAMOD_API int str_len (lua_State *L) {
   size_t l;
   luaL_checklstring(L, 1, &l);
   lua_pushinteger(L, (lua_Integer)l);
@@ -51,7 +52,7 @@
 }
 
 
-static int str_sub (lua_State *L) {
+LUAMOD_API int str_sub (lua_State *L) {
   size_t l;
   const char *s = luaL_checklstring(L, 1, &l);
   lua_Integer start = posrelat(luaL_checkinteger(L, 2), l);
@@ -65,7 +66,7 @@
 }
 
 
-static int str_reverse (lua_State *L) {
+LUAMOD_API int str_reverse (lua_State *L) {
   size_t l, i;
   luaL_Buffer b;
   const char *s = luaL_checklstring(L, 1, &l);
@@ -77,7 +78,7 @@
 }
 
 
-static int str_lower (lua_State *L) {
+LUAMOD_API int str_lower (lua_State *L) {
   size_t l;
   size_t i;
   luaL_Buffer b;
@@ -90,7 +91,7 @@
 }
 
 
-static int str_upper (lua_State *L) {
+LUAMOD_API int str_upper (lua_State *L) {
   size_t l;
   size_t i;
   luaL_Buffer b;
@@ -110,7 +111,7 @@
 #define MAXSIZE		((size_t)0x10000000)
 #endif
 
-static int str_rep (lua_State *L) {
+LUAMOD_API int str_rep (lua_State *L) {
   size_t l, lsep;
   const char *s = luaL_checklstring(L, 1, &l);
   lua_Integer n = luaL_checkinteger(L, 2);
@@ -136,7 +137,7 @@
 }
 
 
-static int str_byte (lua_State *L) {
+LUAMOD_API int str_byte (lua_State *L) {
   size_t l;
   const char *s = luaL_checklstring(L, 1, &l);
   lua_Integer posi = posrelat(luaL_optinteger(L, 2, 1), l);
@@ -155,7 +156,7 @@
 }
 
 
-static int str_char (lua_State *L) {
+LUAMOD_API int str_char (lua_State *L) {
   int n = lua_gettop(L);  /* number of arguments */
   int i;
   luaL_Buffer b;
@@ -177,7 +178,7 @@
 }
 
 
-static int str_dump (lua_State *L) {
+LUAMOD_API int str_dump (lua_State *L) {
   luaL_Buffer b;
   int strip = lua_toboolean(L, 2);
   luaL_checktype(L, 1, LUA_TFUNCTION);
@@ -633,12 +634,12 @@
 }
 
 
-static int str_find (lua_State *L) {
+LUAMOD_API int str_find (lua_State *L) {
   return str_find_aux(L, 1);
 }
 
 
-static int str_match (lua_State *L) {
+LUAMOD_API int str_match (lua_State *L) {
   return str_find_aux(L, 0);
 }
 
@@ -672,7 +673,7 @@
 }
 
 
-static int gmatch (lua_State *L) {
+LUAMOD_API int gmatch (lua_State *L) {
   luaL_checkstring(L, 1);
   luaL_checkstring(L, 2);
   lua_settop(L, 2);
@@ -739,7 +740,7 @@
 }
 
 
-static int str_gsub (lua_State *L) {
+LUAMOD_API int str_gsub (lua_State *L) {
   size_t srcl, lp;
   const char *src = luaL_checklstring(L, 1, &srcl);
   const char *p = luaL_checklstring(L, 2, &lp);
@@ -865,7 +866,7 @@
 }
 
 
-static int str_format (lua_State *L) {
+LUAMOD_API int str_format (lua_State *L) {
   int top = lua_gettop(L);
   int arg = 1;
   size_t sfl;
@@ -1020,7 +1021,7 @@
 }
 
 
-static int dumpint_l (lua_State *L) {
+LUAMOD_API int dumpint_l (lua_State *L) {
   char buff[MAXINTSIZE];
   lua_Integer n = luaL_checkinteger(L, 1);
   int size = getintsize(L, 2);
@@ -1065,7 +1066,7 @@
 }
 
 
-static int undumpint_l (lua_State *L) {
+LUAMOD_API int undumpint_l (lua_State *L) {
   lua_Integer res;
   size_t len;
   const char *s = luaL_checklstring(L, 1, &len);
@@ -1104,7 +1105,7 @@
 }
 
 
-static int dumpfloat_l (lua_State *L) {
+LUAMOD_API int dumpfloat_l (lua_State *L) {
   float f;  double d;
   char *pn;  /* pointer to number */
   lua_Number n = luaL_checknumber(L, 1);
@@ -1126,7 +1127,7 @@
 }
 
 
-static int undumpfloat_l (lua_State *L) {
+LUAMOD_API int undumpfloat_l (lua_State *L) {
   lua_Number res;
   size_t len;
   const char *s = luaL_checklstring(L, 1, &len);
diff -Naur src-orig/lstrlib.h src/lstrlib.h
--- src-orig/lstrlib.h	1969-12-31 16:00:00.000000000 -0800
+++ src/lstrlib.h	2014-07-04 21:21:06.043670240 -0700
@@ -0,0 +1,26 @@
+// This file has been added to purposely expose the strlib functions so that
+// it is possible to build a custom strlib module.
+
+#ifndef LSTRLIB_H_
+#define LSTRLIB_H_
+
+LUAMOD_API int str_len (lua_State *L);
+LUAMOD_API int str_sub (lua_State *L);
+LUAMOD_API int str_reverse (lua_State *L);
+LUAMOD_API int str_lower (lua_State *L);
+LUAMOD_API int str_upper (lua_State *L);
+LUAMOD_API int str_rep (lua_State *L);
+LUAMOD_API int str_byte (lua_State *L);
+LUAMOD_API int str_char (lua_State *L);
+LUAMOD_API int str_dump (lua_State *L);
+LUAMOD_API int str_find (lua_State *L);
+LUAMOD_API int str_match (lua_State *L);
+LUAMOD_API int gmatch (lua_State *L);
+LUAMOD_API int str_gsub (lua_State *L);
+LUAMOD_API int str_format (lua_State *L);
+LUAMOD_API int dumpint_l (lua_State *L);
+LUAMOD_API int undumpint_l (lua_State *L);
+LUAMOD_API int dumpfloat_l (lua_State *L);
+LUAMOD_API int undumpfloat_l (lua_State *L);
+
+#endif  // LSTRLIB_H_
